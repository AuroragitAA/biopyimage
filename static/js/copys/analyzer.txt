class AnalysisConfig:
    """Production-ready configuration with all required fields."""
    
    # Core parameters
    pixel_to_micron: float = 1.0
    min_cell_area: int = 30
    max_cell_area: int = 8000
    chlorophyll_threshold: float = 0.6
    
    # Processing parameters
    noise_reduction_sigma: float = 0.8
    contrast_enhancement_clip: float = 0.03
    multi_scale_levels: int = 3
    watershed_min_distance: int = 8
    adaptive_block_size: int = 21
    
    # Quality control
    min_image_quality_score: float = 0.7
    outlier_detection_contamination: float = 0.1
    confidence_interval: float = 0.95
    
    # Health score weights
    health_score_weights: Dict[str, float] = None
    
    # Processing stages configuration
    preprocessing: Dict[str, bool] = None
    thresholding: Dict[str, any] = None
    morphology: Dict[str, any] = None
    postprocessing: Dict[str, any] = None
    
    def __post_init__(self):
        if self.health_score_weights is None:
            self.health_score_weights = {
                'chlorophyll_content': 0.3,
                'cell_integrity': 0.25,
                'size_consistency': 0.2,
                'texture_uniformity': 0.15,
                'shape_regularity': 0.1
            }
        
        if self.preprocessing is None:
            self.preprocessing = {
                'noise_reduction': True,
                'contrast_enhancement': True,
                'illumination_correction': True
            }
        
        if self.thresholding is None:
            self.thresholding = {
                'methods': ['otsu', 'adaptive', 'multiotsu', 'li'],
                'adaptive_block_size': self.adaptive_block_size,
                'adaptive_c': 2,
                'manual_threshold': None
            }
        
        if self.morphology is None:
            self.morphology = {
                'opening_size': 2,
                'closing_size': 3,
                'remove_small_objects': 50,
                'fill_holes': True
            }
        
        if self.postprocessing is None:
            self.postprocessing = {
                'remove_border': True,
                'border_width': 10,
                'size_filter': True,
                'shape_filter': True,
                'min_area': self.min_cell_area,
                'max_area': self.max_cell_area,
                'min_circularity': 0.3,
                'max_eccentricity': 0.95
            }
